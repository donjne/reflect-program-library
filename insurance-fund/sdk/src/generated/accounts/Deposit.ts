/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Deposit}
 * @category Accounts
 * @category generated
 */
export type DepositArgs = {
  index: beet.bignum
  user: web3.PublicKey
  amount: beet.bignum
  initialUsdValue: beet.bignum
  amountSlashed: beet.bignum
  lockup: web3.PublicKey
  unlockTs: beet.bignum
  lastSlashed: beet.COption<beet.bignum>
}

export const depositDiscriminator = [148, 146, 121, 66, 207, 173, 21, 227]
/**
 * Holds the data for the {@link Deposit} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Deposit implements DepositArgs {
  private constructor(
    readonly index: beet.bignum,
    readonly user: web3.PublicKey,
    readonly amount: beet.bignum,
    readonly initialUsdValue: beet.bignum,
    readonly amountSlashed: beet.bignum,
    readonly lockup: web3.PublicKey,
    readonly unlockTs: beet.bignum,
    readonly lastSlashed: beet.COption<beet.bignum>
  ) {}

  /**
   * Creates a {@link Deposit} instance from the provided args.
   */
  static fromArgs(args: DepositArgs) {
    return new Deposit(
      args.index,
      args.user,
      args.amount,
      args.initialUsdValue,
      args.amountSlashed,
      args.lockup,
      args.unlockTs,
      args.lastSlashed
    )
  }

  /**
   * Deserializes the {@link Deposit} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Deposit, number] {
    return Deposit.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Deposit} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Deposit> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Deposit account at ${address}`)
    }
    return Deposit.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'EiMoMLXBCKpxTdBwK2mBBaGFWH1v2JdT5nAhiyJdF3pV'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, depositBeet)
  }

  /**
   * Deserializes the {@link Deposit} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Deposit, number] {
    return depositBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Deposit} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return depositBeet.serialize({
      accountDiscriminator: depositDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Deposit} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: DepositArgs) {
    const instance = Deposit.fromArgs(args)
    return depositBeet.toFixedFromValue({
      accountDiscriminator: depositDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Deposit} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: DepositArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Deposit.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Deposit} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      index: (() => {
        const x = <{ toNumber: () => number }>this.index
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      user: this.user.toBase58(),
      amount: (() => {
        const x = <{ toNumber: () => number }>this.amount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      initialUsdValue: (() => {
        const x = <{ toNumber: () => number }>this.initialUsdValue
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      amountSlashed: (() => {
        const x = <{ toNumber: () => number }>this.amountSlashed
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lockup: this.lockup.toBase58(),
      unlockTs: (() => {
        const x = <{ toNumber: () => number }>this.unlockTs
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastSlashed: this.lastSlashed,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const depositBeet = new beet.FixableBeetStruct<
  Deposit,
  DepositArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['index', beet.u64],
    ['user', beetSolana.publicKey],
    ['amount', beet.u64],
    ['initialUsdValue', beet.u64],
    ['amountSlashed', beet.u64],
    ['lockup', beetSolana.publicKey],
    ['unlockTs', beet.u64],
    ['lastSlashed', beet.coption(beet.u64)],
  ],
  Deposit.fromArgs,
  'Deposit'
)
