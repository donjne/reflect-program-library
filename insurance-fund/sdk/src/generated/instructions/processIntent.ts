/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ProcessIntentArgs,
  processIntentArgsBeet,
} from '../types/ProcessIntentArgs'

/**
 * @category Instructions
 * @category ProcessIntent
 * @category generated
 */
export type ProcessIntentInstructionArgs = {
  args: ProcessIntentArgs
}
/**
 * @category Instructions
 * @category ProcessIntent
 * @category generated
 */
export const processIntentStruct = new beet.BeetArgsStruct<
  ProcessIntentInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', processIntentArgsBeet],
  ],
  'ProcessIntentInstructionArgs'
)
/**
 * Accounts required by the _processIntent_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] admin
 * @property [_writable_] user
 * @property [_writable_] settings
 * @property [_writable_] deposit
 * @property [_writable_] intent
 * @property [_writable_] lockup
 * @property [_writable_] asset
 * @property [_writable_] assetMint
 * @property [_writable_] adminAssetAta
 * @property [_writable_] userAssetAta
 * @category Instructions
 * @category ProcessIntent
 * @category generated
 */
export type ProcessIntentInstructionAccounts = {
  signer: web3.PublicKey
  admin: web3.PublicKey
  user: web3.PublicKey
  settings: web3.PublicKey
  deposit: web3.PublicKey
  intent: web3.PublicKey
  lockup: web3.PublicKey
  asset: web3.PublicKey
  assetMint: web3.PublicKey
  adminAssetAta: web3.PublicKey
  userAssetAta: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const processIntentInstructionDiscriminator = [
  205, 26, 207, 143, 70, 246, 24, 206,
]

/**
 * Creates a _ProcessIntent_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessIntent
 * @category generated
 */
export function createProcessIntentInstruction(
  accounts: ProcessIntentInstructionAccounts,
  args: ProcessIntentInstructionArgs,
  programId = new web3.PublicKey('EiMoMLXBCKpxTdBwK2mBBaGFWH1v2JdT5nAhiyJdF3pV')
) {
  const [data] = processIntentStruct.serialize({
    instructionDiscriminator: processIntentInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.deposit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.intent,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.asset,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.assetMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.adminAssetAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAssetAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
