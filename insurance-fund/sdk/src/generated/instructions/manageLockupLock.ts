/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ManageLockupLockArgs,
  manageLockupLockArgsBeet,
} from '../types/ManageLockupLockArgs'

/**
 * @category Instructions
 * @category ManageLockupLock
 * @category generated
 */
export type ManageLockupLockInstructionArgs = {
  args: ManageLockupLockArgs
}
/**
 * @category Instructions
 * @category ManageLockupLock
 * @category generated
 */
export const manageLockupLockStruct = new beet.BeetArgsStruct<
  ManageLockupLockInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', manageLockupLockArgsBeet],
  ],
  'ManageLockupLockInstructionArgs'
)
/**
 * Accounts required by the _manageLockupLock_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] admin
 * @property [_writable_] settings
 * @property [_writable_] lockup
 * @category Instructions
 * @category ManageLockupLock
 * @category generated
 */
export type ManageLockupLockInstructionAccounts = {
  signer: web3.PublicKey
  admin: web3.PublicKey
  settings: web3.PublicKey
  lockup: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const manageLockupLockInstructionDiscriminator = [
  236, 72, 44, 71, 110, 190, 135, 139,
]

/**
 * Creates a _ManageLockupLock_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ManageLockupLock
 * @category generated
 */
export function createManageLockupLockInstruction(
  accounts: ManageLockupLockInstructionAccounts,
  args: ManageLockupLockInstructionArgs,
  programId = new web3.PublicKey('EiMoMLXBCKpxTdBwK2mBBaGFWH1v2JdT5nAhiyJdF3pV')
) {
  const [data] = manageLockupLockStruct.serialize({
    instructionDiscriminator: manageLockupLockInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockup,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
