/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link YieldMode} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link YieldMode} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type YieldModeRecord = {
  Single: void /* scalar variant */
  Dual: { fields: [beet.bignum] }
}

/**
 * Union type respresenting the YieldMode data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isYieldMode*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type YieldMode = beet.DataEnumKeyAsKind<YieldModeRecord>

export const isYieldModeSingle = (
  x: YieldMode
): x is YieldMode & { __kind: 'Single' } => x.__kind === 'Single'
export const isYieldModeDual = (
  x: YieldMode
): x is YieldMode & { __kind: 'Dual' } => x.__kind === 'Dual'

/**
 * @category userTypes
 * @category generated
 */
export const yieldModeBeet = beet.dataEnum<YieldModeRecord>([
  ['Single', beet.unit],
  [
    'Dual',
    new beet.BeetArgsStruct<YieldModeRecord['Dual']>(
      [['fields', beet.fixedSizeTuple([beet.u64])]],
      'YieldModeRecord["Dual"]'
    ),
  ],
]) as beet.FixableBeet<YieldMode, YieldMode>
