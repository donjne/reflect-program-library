/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { SharesConfig } from '../types/SharesConfig';
import { RewardConfig } from '../types/RewardConfig';
/**
 * Arguments used to create {@link Settings}
 * @category Accounts
 * @category generated
 */
export type SettingsArgs = {
    bump: number;
    superadmins: number;
    coldWallet: web3.PublicKey;
    lockups: beet.bignum;
    cooldownDuration: beet.bignum;
    sharesConfig: SharesConfig;
    rewardConfig: RewardConfig;
    frozen: boolean;
};
export declare const settingsDiscriminator: number[];
/**
 * Holds the data for the {@link Settings} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class Settings implements SettingsArgs {
    readonly bump: number;
    readonly superadmins: number;
    readonly coldWallet: web3.PublicKey;
    readonly lockups: beet.bignum;
    readonly cooldownDuration: beet.bignum;
    readonly sharesConfig: SharesConfig;
    readonly rewardConfig: RewardConfig;
    readonly frozen: boolean;
    private constructor();
    /**
     * Creates a {@link Settings} instance from the provided args.
     */
    static fromArgs(args: SettingsArgs): Settings;
    /**
     * Deserializes the {@link Settings} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [Settings, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Settings} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<Settings>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<{
        accountDiscriminator: any;
        lockups: any;
        bump: any;
        superadmins: any;
        coldWallet: any;
        cooldownDuration: any;
        sharesConfig: any;
        rewardConfig: any;
        frozen: any;
    }>;
    /**
     * Deserializes the {@link Settings} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [Settings, number];
    /**
     * Serializes the {@link Settings} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Settings}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Settings} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link Settings} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link Settings} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        bump: number;
        superadmins: number;
        coldWallet: string;
        lockups: number | {
            toNumber: () => number;
        };
        cooldownDuration: number | {
            toNumber: () => number;
        };
        sharesConfig: SharesConfig;
        rewardConfig: RewardConfig;
        frozen: boolean;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const settingsBeet: beet.BeetStruct<Settings, SettingsArgs & {
    accountDiscriminator: number[];
}>;
