/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * Arguments used to create {@link Slash}
 * @category Accounts
 * @category generated
 */
export type SlashArgs = {
    index: beet.bignum;
    targetAccounts: beet.bignum;
    slashedAccounts: beet.bignum;
    targetAmount: beet.bignum;
    slashedAmount: beet.bignum;
    transferSig: beet.COption<string>;
    slashedColdWallet: boolean;
};
export declare const slashDiscriminator: number[];
/**
 * Holds the data for the {@link Slash} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class Slash implements SlashArgs {
    readonly index: beet.bignum;
    readonly targetAccounts: beet.bignum;
    readonly slashedAccounts: beet.bignum;
    readonly targetAmount: beet.bignum;
    readonly slashedAmount: beet.bignum;
    readonly transferSig: beet.COption<string>;
    readonly slashedColdWallet: boolean;
    private constructor();
    /**
     * Creates a {@link Slash} instance from the provided args.
     */
    static fromArgs(args: SlashArgs): Slash;
    /**
     * Deserializes the {@link Slash} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [Slash, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Slash} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<Slash>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<SlashArgs & {
        accountDiscriminator: number[];
    }>;
    /**
     * Deserializes the {@link Slash} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [Slash, number];
    /**
     * Serializes the {@link Slash} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Slash} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args: SlashArgs): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Slash} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args: SlashArgs, connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Returns a readable version of {@link Slash} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        index: number | {
            toNumber: () => number;
        };
        targetAccounts: number | {
            toNumber: () => number;
        };
        slashedAccounts: number | {
            toNumber: () => number;
        };
        targetAmount: number | {
            toNumber: () => number;
        };
        slashedAmount: number | {
            toNumber: () => number;
        };
        transferSig: string;
        slashedColdWallet: boolean;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const slashBeet: beet.FixableBeetStruct<Slash, SlashArgs & {
    accountDiscriminator: number[];
}>;
