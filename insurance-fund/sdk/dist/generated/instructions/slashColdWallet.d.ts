/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { SlashColdWalletArgs } from '../types/SlashColdWalletArgs';
/**
 * @category Instructions
 * @category SlashColdWallet
 * @category generated
 */
export type SlashColdWalletInstructionArgs = {
    args: SlashColdWalletArgs;
};
/**
 * @category Instructions
 * @category SlashColdWallet
 * @category generated
 */
export declare const slashColdWalletStruct: beet.FixableBeetArgsStruct<SlashColdWalletInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _slashColdWallet_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] admin
 * @property [_writable_] settings
 * @property [_writable_] coldWallet
 * @property [_writable_] lockup
 * @property [_writable_] slash
 * @property [_writable_] assetMint (optional)
 * @property [_writable_] source (optional)
 * @property [_writable_] destination (optional)
 * @category Instructions
 * @category SlashColdWallet
 * @category generated
 */
export type SlashColdWalletInstructionAccounts = {
    signer: web3.PublicKey;
    admin: web3.PublicKey;
    settings: web3.PublicKey;
    coldWallet: web3.PublicKey;
    lockup: web3.PublicKey;
    slash: web3.PublicKey;
    assetMint?: web3.PublicKey;
    source?: web3.PublicKey;
    destination?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const slashColdWalletInstructionDiscriminator: number[];
/**
 * Creates a _SlashColdWallet_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SlashColdWallet
 * @category generated
 */
export declare function createSlashColdWalletInstruction(accounts: SlashColdWalletInstructionAccounts, args: SlashColdWalletInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
