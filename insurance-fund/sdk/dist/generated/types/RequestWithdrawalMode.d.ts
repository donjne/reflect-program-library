/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
/**
 * This type is used to derive the {@link RequestWithdrawalMode} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link RequestWithdrawalMode} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type RequestWithdrawalModeRecord = {
    ExactIn: {
        fields: [beet.bignum];
    };
    ExactOut: {
        fields: [beet.bignum];
    };
};
/**
 * Union type respresenting the RequestWithdrawalMode data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isRequestWithdrawalMode*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type RequestWithdrawalMode = beet.DataEnumKeyAsKind<RequestWithdrawalModeRecord>;
export declare const isRequestWithdrawalModeExactIn: (x: RequestWithdrawalMode) => x is RequestWithdrawalMode & {
    __kind: "ExactIn";
};
export declare const isRequestWithdrawalModeExactOut: (x: RequestWithdrawalMode) => x is RequestWithdrawalMode & {
    __kind: "ExactOut";
};
/**
 * @category userTypes
 * @category generated
 */
export declare const requestWithdrawalModeBeet: beet.FixableBeet<RequestWithdrawalMode, RequestWithdrawalMode>;
