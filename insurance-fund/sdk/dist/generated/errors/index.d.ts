/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidSigner: 'InvalidSigner'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidSignerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidInput: 'InvalidInput'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidInputError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AssetNotWhitelisted: 'AssetNotWhitelisted'
 *
 * @category Errors
 * @category generated
 */
export declare class AssetNotWhitelistedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DepositTooLow: 'DepositTooLow'
 *
 * @category Errors
 * @category generated
 */
export declare class DepositTooLowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DepositCapOverflow: 'DepositCapOverflow'
 *
 * @category Errors
 * @category generated
 */
export declare class DepositCapOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughFunds: 'NotEnoughFunds'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughFundsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughReceiptTokens: 'NotEnoughReceiptTokens'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughReceiptTokensError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughFundsToSlash: 'NotEnoughFundsToSlash'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughFundsToSlashError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DepositsLocked: 'DepositsLocked'
 *
 * @category Errors
 * @category generated
 */
export declare class DepositsLockedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DepositsOpen: 'DepositsOpen'
 *
 * @category Errors
 * @category generated
 */
export declare class DepositsOpenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DepositsNotSlashed: 'DepositsNotSlashed'
 *
 * @category Errors
 * @category generated
 */
export declare class DepositsNotSlashedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AllDepositsSlashed: 'AllDepositsSlashed'
 *
 * @category Errors
 * @category generated
 */
export declare class AllDepositsSlashedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SlashAmountMismatch: 'SlashAmountMismatch'
 *
 * @category Errors
 * @category generated
 */
export declare class SlashAmountMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ShareConfigOverflow: 'ShareConfigOverflow'
 *
 * @category Errors
 * @category generated
 */
export declare class ShareConfigOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Frozen: 'Frozen'
 *
 * @category Errors
 * @category generated
 */
export declare class FrozenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidOracle: 'InvalidOracle'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidOracleError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MathOverflow: 'MathOverflow'
 *
 * @category Errors
 * @category generated
 */
export declare class MathOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * LockupInForce: 'LockupInForce'
 *
 * @category Errors
 * @category generated
 */
export declare class LockupInForceError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * BoostNotApplied: 'BoostNotApplied'
 *
 * @category Errors
 * @category generated
 */
export declare class BoostNotAppliedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidSigners: 'InvalidSigners'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidSignersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TransferSignatureRequired: 'TransferSignatureRequired'
 *
 * @category Errors
 * @category generated
 */
export declare class TransferSignatureRequiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ColdWalletNotSlashed: 'ColdWalletNotSlashed'
 *
 * @category Errors
 * @category generated
 */
export declare class ColdWalletNotSlashedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PermissionsTooLow: 'PermissionsTooLow'
 *
 * @category Errors
 * @category generated
 */
export declare class PermissionsTooLowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * WithdrawalThresholdOverflow: 'WithdrawalThresholdOverflow'
 *
 * @category Errors
 * @category generated
 */
export declare class WithdrawalThresholdOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PoolImbalance: 'PoolImbalance'
 *
 * @category Errors
 * @category generated
 */
export declare class PoolImbalanceError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidReceiptTokenSetup: 'InvalidReceiptTokenSetup'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidReceiptTokenSetupError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MinimumSuperadminsRequired: 'MinimumSuperadminsRequired'
 *
 * @category Errors
 * @category generated
 */
export declare class MinimumSuperadminsRequiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IntentValueTooLow: 'IntentValueTooLow'
 *
 * @category Errors
 * @category generated
 */
export declare class IntentValueTooLowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * WithdrawalNeedsIntent: 'WithdrawalNeedsIntent'
 *
 * @category Errors
 * @category generated
 */
export declare class WithdrawalNeedsIntentError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PriceError: 'PriceError'
 *
 * @category Errors
 * @category generated
 */
export declare class PriceErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CooldownInForce: 'CooldownInForce'
 *
 * @category Errors
 * @category generated
 */
export declare class CooldownInForceError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
