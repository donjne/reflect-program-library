"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CooldownInForceError = exports.PriceErrorError = exports.WithdrawalNeedsIntentError = exports.IntentValueTooLowError = exports.MinimumSuperadminsRequiredError = exports.InvalidReceiptTokenSetupError = exports.PoolImbalanceError = exports.WithdrawalThresholdOverflowError = exports.PermissionsTooLowError = exports.ColdWalletNotSlashedError = exports.TransferSignatureRequiredError = exports.InvalidSignersError = exports.BoostNotAppliedError = exports.LockupInForceError = exports.MathOverflowError = exports.InvalidOracleError = exports.FrozenError = exports.ShareConfigOverflowError = exports.SlashAmountMismatchError = exports.AllDepositsSlashedError = exports.DepositsNotSlashedError = exports.DepositsOpenError = exports.DepositsLockedError = exports.NotEnoughFundsToSlashError = exports.NotEnoughReceiptTokensError = exports.NotEnoughFundsError = exports.DepositCapOverflowError = exports.DepositTooLowError = exports.AssetNotWhitelistedError = exports.InvalidInputError = exports.InvalidSignerError = void 0;
exports.errorFromCode = errorFromCode;
exports.errorFromName = errorFromName;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidSigner: 'InvalidSigner'
 *
 * @category Errors
 * @category generated
 */
class InvalidSignerError extends Error {
    constructor() {
        super('InvalidSigner');
        this.code = 0x1770;
        this.name = 'InvalidSigner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidSignerError);
        }
    }
}
exports.InvalidSignerError = InvalidSignerError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidSignerError());
createErrorFromNameLookup.set('InvalidSigner', () => new InvalidSignerError());
/**
 * InvalidInput: 'InvalidInput'
 *
 * @category Errors
 * @category generated
 */
class InvalidInputError extends Error {
    constructor() {
        super('InvalidInput');
        this.code = 0x1771;
        this.name = 'InvalidInput';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidInputError);
        }
    }
}
exports.InvalidInputError = InvalidInputError;
createErrorFromCodeLookup.set(0x1771, () => new InvalidInputError());
createErrorFromNameLookup.set('InvalidInput', () => new InvalidInputError());
/**
 * AssetNotWhitelisted: 'AssetNotWhitelisted'
 *
 * @category Errors
 * @category generated
 */
class AssetNotWhitelistedError extends Error {
    constructor() {
        super('AssetNotWhitelisted');
        this.code = 0x1772;
        this.name = 'AssetNotWhitelisted';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AssetNotWhitelistedError);
        }
    }
}
exports.AssetNotWhitelistedError = AssetNotWhitelistedError;
createErrorFromCodeLookup.set(0x1772, () => new AssetNotWhitelistedError());
createErrorFromNameLookup.set('AssetNotWhitelisted', () => new AssetNotWhitelistedError());
/**
 * DepositTooLow: 'DepositTooLow'
 *
 * @category Errors
 * @category generated
 */
class DepositTooLowError extends Error {
    constructor() {
        super('DepositTooLow');
        this.code = 0x1773;
        this.name = 'DepositTooLow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DepositTooLowError);
        }
    }
}
exports.DepositTooLowError = DepositTooLowError;
createErrorFromCodeLookup.set(0x1773, () => new DepositTooLowError());
createErrorFromNameLookup.set('DepositTooLow', () => new DepositTooLowError());
/**
 * DepositCapOverflow: 'DepositCapOverflow'
 *
 * @category Errors
 * @category generated
 */
class DepositCapOverflowError extends Error {
    constructor() {
        super('DepositCapOverflow');
        this.code = 0x1774;
        this.name = 'DepositCapOverflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DepositCapOverflowError);
        }
    }
}
exports.DepositCapOverflowError = DepositCapOverflowError;
createErrorFromCodeLookup.set(0x1774, () => new DepositCapOverflowError());
createErrorFromNameLookup.set('DepositCapOverflow', () => new DepositCapOverflowError());
/**
 * NotEnoughFunds: 'NotEnoughFunds'
 *
 * @category Errors
 * @category generated
 */
class NotEnoughFundsError extends Error {
    constructor() {
        super('NotEnoughFunds');
        this.code = 0x1775;
        this.name = 'NotEnoughFunds';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotEnoughFundsError);
        }
    }
}
exports.NotEnoughFundsError = NotEnoughFundsError;
createErrorFromCodeLookup.set(0x1775, () => new NotEnoughFundsError());
createErrorFromNameLookup.set('NotEnoughFunds', () => new NotEnoughFundsError());
/**
 * NotEnoughReceiptTokens: 'NotEnoughReceiptTokens'
 *
 * @category Errors
 * @category generated
 */
class NotEnoughReceiptTokensError extends Error {
    constructor() {
        super('NotEnoughReceiptTokens');
        this.code = 0x1776;
        this.name = 'NotEnoughReceiptTokens';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotEnoughReceiptTokensError);
        }
    }
}
exports.NotEnoughReceiptTokensError = NotEnoughReceiptTokensError;
createErrorFromCodeLookup.set(0x1776, () => new NotEnoughReceiptTokensError());
createErrorFromNameLookup.set('NotEnoughReceiptTokens', () => new NotEnoughReceiptTokensError());
/**
 * NotEnoughFundsToSlash: 'NotEnoughFundsToSlash'
 *
 * @category Errors
 * @category generated
 */
class NotEnoughFundsToSlashError extends Error {
    constructor() {
        super('NotEnoughFundsToSlash');
        this.code = 0x1777;
        this.name = 'NotEnoughFundsToSlash';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotEnoughFundsToSlashError);
        }
    }
}
exports.NotEnoughFundsToSlashError = NotEnoughFundsToSlashError;
createErrorFromCodeLookup.set(0x1777, () => new NotEnoughFundsToSlashError());
createErrorFromNameLookup.set('NotEnoughFundsToSlash', () => new NotEnoughFundsToSlashError());
/**
 * DepositsLocked: 'DepositsLocked'
 *
 * @category Errors
 * @category generated
 */
class DepositsLockedError extends Error {
    constructor() {
        super('DepositsLocked');
        this.code = 0x1778;
        this.name = 'DepositsLocked';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DepositsLockedError);
        }
    }
}
exports.DepositsLockedError = DepositsLockedError;
createErrorFromCodeLookup.set(0x1778, () => new DepositsLockedError());
createErrorFromNameLookup.set('DepositsLocked', () => new DepositsLockedError());
/**
 * DepositsOpen: 'DepositsOpen'
 *
 * @category Errors
 * @category generated
 */
class DepositsOpenError extends Error {
    constructor() {
        super('DepositsOpen');
        this.code = 0x1779;
        this.name = 'DepositsOpen';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DepositsOpenError);
        }
    }
}
exports.DepositsOpenError = DepositsOpenError;
createErrorFromCodeLookup.set(0x1779, () => new DepositsOpenError());
createErrorFromNameLookup.set('DepositsOpen', () => new DepositsOpenError());
/**
 * DepositsNotSlashed: 'DepositsNotSlashed'
 *
 * @category Errors
 * @category generated
 */
class DepositsNotSlashedError extends Error {
    constructor() {
        super('DepositsNotSlashed');
        this.code = 0x177a;
        this.name = 'DepositsNotSlashed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DepositsNotSlashedError);
        }
    }
}
exports.DepositsNotSlashedError = DepositsNotSlashedError;
createErrorFromCodeLookup.set(0x177a, () => new DepositsNotSlashedError());
createErrorFromNameLookup.set('DepositsNotSlashed', () => new DepositsNotSlashedError());
/**
 * AllDepositsSlashed: 'AllDepositsSlashed'
 *
 * @category Errors
 * @category generated
 */
class AllDepositsSlashedError extends Error {
    constructor() {
        super('AllDepositsSlashed');
        this.code = 0x177b;
        this.name = 'AllDepositsSlashed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AllDepositsSlashedError);
        }
    }
}
exports.AllDepositsSlashedError = AllDepositsSlashedError;
createErrorFromCodeLookup.set(0x177b, () => new AllDepositsSlashedError());
createErrorFromNameLookup.set('AllDepositsSlashed', () => new AllDepositsSlashedError());
/**
 * SlashAmountMismatch: 'SlashAmountMismatch'
 *
 * @category Errors
 * @category generated
 */
class SlashAmountMismatchError extends Error {
    constructor() {
        super('SlashAmountMismatch');
        this.code = 0x177c;
        this.name = 'SlashAmountMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, SlashAmountMismatchError);
        }
    }
}
exports.SlashAmountMismatchError = SlashAmountMismatchError;
createErrorFromCodeLookup.set(0x177c, () => new SlashAmountMismatchError());
createErrorFromNameLookup.set('SlashAmountMismatch', () => new SlashAmountMismatchError());
/**
 * ShareConfigOverflow: 'ShareConfigOverflow'
 *
 * @category Errors
 * @category generated
 */
class ShareConfigOverflowError extends Error {
    constructor() {
        super('ShareConfigOverflow');
        this.code = 0x177d;
        this.name = 'ShareConfigOverflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ShareConfigOverflowError);
        }
    }
}
exports.ShareConfigOverflowError = ShareConfigOverflowError;
createErrorFromCodeLookup.set(0x177d, () => new ShareConfigOverflowError());
createErrorFromNameLookup.set('ShareConfigOverflow', () => new ShareConfigOverflowError());
/**
 * Frozen: 'Frozen'
 *
 * @category Errors
 * @category generated
 */
class FrozenError extends Error {
    constructor() {
        super('Frozen');
        this.code = 0x177e;
        this.name = 'Frozen';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, FrozenError);
        }
    }
}
exports.FrozenError = FrozenError;
createErrorFromCodeLookup.set(0x177e, () => new FrozenError());
createErrorFromNameLookup.set('Frozen', () => new FrozenError());
/**
 * InvalidOracle: 'InvalidOracle'
 *
 * @category Errors
 * @category generated
 */
class InvalidOracleError extends Error {
    constructor() {
        super('InvalidOracle');
        this.code = 0x177f;
        this.name = 'InvalidOracle';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidOracleError);
        }
    }
}
exports.InvalidOracleError = InvalidOracleError;
createErrorFromCodeLookup.set(0x177f, () => new InvalidOracleError());
createErrorFromNameLookup.set('InvalidOracle', () => new InvalidOracleError());
/**
 * MathOverflow: 'MathOverflow'
 *
 * @category Errors
 * @category generated
 */
class MathOverflowError extends Error {
    constructor() {
        super('MathOverflow');
        this.code = 0x1780;
        this.name = 'MathOverflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MathOverflowError);
        }
    }
}
exports.MathOverflowError = MathOverflowError;
createErrorFromCodeLookup.set(0x1780, () => new MathOverflowError());
createErrorFromNameLookup.set('MathOverflow', () => new MathOverflowError());
/**
 * LockupInForce: 'LockupInForce'
 *
 * @category Errors
 * @category generated
 */
class LockupInForceError extends Error {
    constructor() {
        super('LockupInForce');
        this.code = 0x1781;
        this.name = 'LockupInForce';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, LockupInForceError);
        }
    }
}
exports.LockupInForceError = LockupInForceError;
createErrorFromCodeLookup.set(0x1781, () => new LockupInForceError());
createErrorFromNameLookup.set('LockupInForce', () => new LockupInForceError());
/**
 * BoostNotApplied: 'BoostNotApplied'
 *
 * @category Errors
 * @category generated
 */
class BoostNotAppliedError extends Error {
    constructor() {
        super('BoostNotApplied');
        this.code = 0x1782;
        this.name = 'BoostNotApplied';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, BoostNotAppliedError);
        }
    }
}
exports.BoostNotAppliedError = BoostNotAppliedError;
createErrorFromCodeLookup.set(0x1782, () => new BoostNotAppliedError());
createErrorFromNameLookup.set('BoostNotApplied', () => new BoostNotAppliedError());
/**
 * InvalidSigners: 'InvalidSigners'
 *
 * @category Errors
 * @category generated
 */
class InvalidSignersError extends Error {
    constructor() {
        super('InvalidSigners');
        this.code = 0x1783;
        this.name = 'InvalidSigners';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidSignersError);
        }
    }
}
exports.InvalidSignersError = InvalidSignersError;
createErrorFromCodeLookup.set(0x1783, () => new InvalidSignersError());
createErrorFromNameLookup.set('InvalidSigners', () => new InvalidSignersError());
/**
 * TransferSignatureRequired: 'TransferSignatureRequired'
 *
 * @category Errors
 * @category generated
 */
class TransferSignatureRequiredError extends Error {
    constructor() {
        super('TransferSignatureRequired');
        this.code = 0x1784;
        this.name = 'TransferSignatureRequired';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TransferSignatureRequiredError);
        }
    }
}
exports.TransferSignatureRequiredError = TransferSignatureRequiredError;
createErrorFromCodeLookup.set(0x1784, () => new TransferSignatureRequiredError());
createErrorFromNameLookup.set('TransferSignatureRequired', () => new TransferSignatureRequiredError());
/**
 * ColdWalletNotSlashed: 'ColdWalletNotSlashed'
 *
 * @category Errors
 * @category generated
 */
class ColdWalletNotSlashedError extends Error {
    constructor() {
        super('ColdWalletNotSlashed');
        this.code = 0x1785;
        this.name = 'ColdWalletNotSlashed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ColdWalletNotSlashedError);
        }
    }
}
exports.ColdWalletNotSlashedError = ColdWalletNotSlashedError;
createErrorFromCodeLookup.set(0x1785, () => new ColdWalletNotSlashedError());
createErrorFromNameLookup.set('ColdWalletNotSlashed', () => new ColdWalletNotSlashedError());
/**
 * PermissionsTooLow: 'PermissionsTooLow'
 *
 * @category Errors
 * @category generated
 */
class PermissionsTooLowError extends Error {
    constructor() {
        super('PermissionsTooLow');
        this.code = 0x1786;
        this.name = 'PermissionsTooLow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PermissionsTooLowError);
        }
    }
}
exports.PermissionsTooLowError = PermissionsTooLowError;
createErrorFromCodeLookup.set(0x1786, () => new PermissionsTooLowError());
createErrorFromNameLookup.set('PermissionsTooLow', () => new PermissionsTooLowError());
/**
 * WithdrawalThresholdOverflow: 'WithdrawalThresholdOverflow'
 *
 * @category Errors
 * @category generated
 */
class WithdrawalThresholdOverflowError extends Error {
    constructor() {
        super('WithdrawalThresholdOverflow');
        this.code = 0x1787;
        this.name = 'WithdrawalThresholdOverflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WithdrawalThresholdOverflowError);
        }
    }
}
exports.WithdrawalThresholdOverflowError = WithdrawalThresholdOverflowError;
createErrorFromCodeLookup.set(0x1787, () => new WithdrawalThresholdOverflowError());
createErrorFromNameLookup.set('WithdrawalThresholdOverflow', () => new WithdrawalThresholdOverflowError());
/**
 * PoolImbalance: 'PoolImbalance'
 *
 * @category Errors
 * @category generated
 */
class PoolImbalanceError extends Error {
    constructor() {
        super('PoolImbalance');
        this.code = 0x1788;
        this.name = 'PoolImbalance';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PoolImbalanceError);
        }
    }
}
exports.PoolImbalanceError = PoolImbalanceError;
createErrorFromCodeLookup.set(0x1788, () => new PoolImbalanceError());
createErrorFromNameLookup.set('PoolImbalance', () => new PoolImbalanceError());
/**
 * InvalidReceiptTokenSetup: 'InvalidReceiptTokenSetup'
 *
 * @category Errors
 * @category generated
 */
class InvalidReceiptTokenSetupError extends Error {
    constructor() {
        super('InvalidReceiptTokenSetup');
        this.code = 0x1789;
        this.name = 'InvalidReceiptTokenSetup';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidReceiptTokenSetupError);
        }
    }
}
exports.InvalidReceiptTokenSetupError = InvalidReceiptTokenSetupError;
createErrorFromCodeLookup.set(0x1789, () => new InvalidReceiptTokenSetupError());
createErrorFromNameLookup.set('InvalidReceiptTokenSetup', () => new InvalidReceiptTokenSetupError());
/**
 * MinimumSuperadminsRequired: 'MinimumSuperadminsRequired'
 *
 * @category Errors
 * @category generated
 */
class MinimumSuperadminsRequiredError extends Error {
    constructor() {
        super('MinimumSuperadminsRequired');
        this.code = 0x178a;
        this.name = 'MinimumSuperadminsRequired';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MinimumSuperadminsRequiredError);
        }
    }
}
exports.MinimumSuperadminsRequiredError = MinimumSuperadminsRequiredError;
createErrorFromCodeLookup.set(0x178a, () => new MinimumSuperadminsRequiredError());
createErrorFromNameLookup.set('MinimumSuperadminsRequired', () => new MinimumSuperadminsRequiredError());
/**
 * IntentValueTooLow: 'IntentValueTooLow'
 *
 * @category Errors
 * @category generated
 */
class IntentValueTooLowError extends Error {
    constructor() {
        super('IntentValueTooLow');
        this.code = 0x178b;
        this.name = 'IntentValueTooLow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IntentValueTooLowError);
        }
    }
}
exports.IntentValueTooLowError = IntentValueTooLowError;
createErrorFromCodeLookup.set(0x178b, () => new IntentValueTooLowError());
createErrorFromNameLookup.set('IntentValueTooLow', () => new IntentValueTooLowError());
/**
 * WithdrawalNeedsIntent: 'WithdrawalNeedsIntent'
 *
 * @category Errors
 * @category generated
 */
class WithdrawalNeedsIntentError extends Error {
    constructor() {
        super('WithdrawalNeedsIntent');
        this.code = 0x178c;
        this.name = 'WithdrawalNeedsIntent';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WithdrawalNeedsIntentError);
        }
    }
}
exports.WithdrawalNeedsIntentError = WithdrawalNeedsIntentError;
createErrorFromCodeLookup.set(0x178c, () => new WithdrawalNeedsIntentError());
createErrorFromNameLookup.set('WithdrawalNeedsIntent', () => new WithdrawalNeedsIntentError());
/**
 * PriceError: 'PriceError'
 *
 * @category Errors
 * @category generated
 */
class PriceErrorError extends Error {
    constructor() {
        super('PriceError');
        this.code = 0x178d;
        this.name = 'PriceError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PriceErrorError);
        }
    }
}
exports.PriceErrorError = PriceErrorError;
createErrorFromCodeLookup.set(0x178d, () => new PriceErrorError());
createErrorFromNameLookup.set('PriceError', () => new PriceErrorError());
/**
 * CooldownInForce: 'CooldownInForce'
 *
 * @category Errors
 * @category generated
 */
class CooldownInForceError extends Error {
    constructor() {
        super('CooldownInForce');
        this.code = 0x178e;
        this.name = 'CooldownInForce';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CooldownInForceError);
        }
    }
}
exports.CooldownInForceError = CooldownInForceError;
createErrorFromCodeLookup.set(0x178e, () => new CooldownInForceError());
createErrorFromNameLookup.set('CooldownInForce', () => new CooldownInForceError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
